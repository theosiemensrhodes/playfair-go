package cipher

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

// Helper function to convert a key string to a [25]byte array
func stringTo25Byte(s string) [25]byte {
	var arr [25]byte
	copy(arr[:], s)
	return arr
}

func TestPlayfairDecrypt(t *testing.T) {
	tests := []struct {
		ciphertext []byte
		key        [25]byte
		plaintext  []byte
	}{
		{
			ciphertext: []byte("PWITUVGAWRMGEWNMECQVXVYTVWGTQFWTZYGWIMSVLWSVNVWEEQWCTIPVSIRWQEXVLXPMCGBRFNVSTGVMWEFOVMCTZQKQESRXEZEOQKDQLVAUNMVKGAWEWGBYTGFRNMXCSWWDGDBASIRWPMQRXIBSWXSITITGNZXSOEXVLXSKPVTFOEXVPWICQVXVPWECBEMOIVGMCIXVVLQEVWBDVROCXUVBWRUVGAWAGVWQEMVMWEMKSVWRVMISWRVQPKQFXEMGIGAUCMELWNDWVWSQCFMOMCXVMKLVKZGTEQNHMQTWNMOS"),
			key:        stringTo25Byte("RSBQLVECTIAWPNGKFYOZHXDMU"),
			plaintext:  []byte("WATCHINGASUNSETOVERTHEOCEANISONEOFNATURESGREATESTSPECTACLESASTHESUNDIPSLOWERINTHESKYTHECOLORSXSHIFTFROMBRIGHTORANGESANDPINKSTODEXEPXPURPLESANDBLUESREFLECTINGOFXFTHESURFACEOFTHEWATERTHEWAVESCONTINUETHEIRSTEADYRHYTHMCRASHINGAGAINSTXTHESHOREASTHELASTRAYSOFSUNLIGHTDISAPXPEARBEYONDTHEHORIZONITSAMOMENTOFQ"),
		},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			result := PlayfairDecrypt(tt.ciphertext, tt.key, 'X')
			assert.Equalf(t, tt.plaintext, result, fmt.Sprintf("PlayfairDecrypt = %v, want %v\n", result, tt.plaintext))
		})
	}
}

func TestPlayfairEncrypt(t *testing.T) {
	tests := []struct {
		ciphertext []byte
		key        [25]byte
		plaintext  []byte
	}{
		{
			ciphertext: []byte("PWITUVGAWRMGEWNMECQVXVYTVWGTQFWTZYGWIMSVLWSVNVWEEQWCTIPVSIRWQEXVLXPMCGBRFNVSTGVMWEFOVMCTZQKQESRXEZEOQKDQLVAUNMVKGAWEWGBYTGFRNMXCSWWDGDBASIRWPMQRXIBSWXSITITGNZXSOEXVLXSKPVTFOEXVPWICQVXVPWECBEMOIVGMCIXVVLQEVWBDVROCXUVBWRUVGAWAGVWQEMVMWEMKSVWRVMISWRVQPKQFXEMGIGAUCMELWNDWVWSQCFMOMCXVMKLVKZGTEQNHMQTWNMOS"),
			key:        stringTo25Byte("RSBQLVECTIAWPNGKFYOZHXDMU"),
			plaintext:  []byte("WATCHINGASUNSETOVERTHEOCEANISONEOFNATURESGREATESTSPECTACLESASTHESUNDIPSLOWERINTHESKYTHECOLORSXSHIFTFROMBRIGHTORANGESANDPINKSTODEXEPXPURPLESANDBLUESREFLECTINGOFXFTHESURFACEOFTHEWATERTHEWAVESCONTINUETHEIRSTEADYRHYTHMCRASHINGAGAINSTXTHESHOREASTHELASTRAYSOFSUNLIGHTDISAPXPEARBEYONDTHEHORIZONITSAMOMENTOFQ"),
		},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("Test %d", i+1), func(t *testing.T) {
			result := PlayfairEncrypt(tt.plaintext, tt.key, 'X')
			assert.Equalf(t, tt.ciphertext, result, fmt.Sprintf("PlayfairEncrypt = %v, want %v\n", result, tt.ciphertext))
		})
	}
}

func BenchmarkPlayfairCrack(b *testing.B) {
	ciphertext := []byte("WATCHINGASUNSETOVERTHEOCEANISONEOFNATURESGREATESTSPECTACLESASTHESUNDIPSLOWERINTHESKYTHECOLORSXSHIFTFROMBRIGHTORANGESANDPINKSTODEXEPXPURPLESANDBLUESREFLECTINGOFXFTHESURFACEOFTHEWATERTHEWAVESCONTINUETHEIRSTEADYRHYTHMCRASHINGAGAINSTXTHESHOREASTHELASTRAYSOFSUNLIGHTDISAPXPEARBEYONDTHEHORIZONITSAMOMENTOFQ")
	key := stringTo25Byte("RSBQLVECTIAWPNGKFYOZHXDMU")

	for i := 0; i < b.N; i++ {
		PlayfairDecrypt(ciphertext, key, 'X')
	}
}
